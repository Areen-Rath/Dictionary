{"version":3,"sources":["components/InputBox.js","components/SearchButton.js","components/SpeechButton.js","screens/Dictionary.js","screens/Help.js","components/CustomSidebarMenu.js","App.js","assets/search.png","assets/result.png","assets/icon.png"],"names":["InputBox","TextInput","style","styles","inputBox","placeholder","this","props","onChangeText","React","StyleSheet","create","marginTop","width","height","borderWidth","alignSelf","textAlign","SearchButton","TouchableOpacity","button","onPress","Text","buttonText","backgroundColor","alignItems","justifyContent","fontWeight","fontSize","color","speak","a","async","Speech","text","Dictionary","getWordData","input","state","setState","word","toLowerCase","wordData","url","fetch","then","response","json","responseJson","wordDataArr","title","i","meanings","map","item","push","partOfSpeech","toUpperCase","definitions","definition","renderItem","View","flex","keyboardShouldPersistTaps","flexDirection","marginLeft","FlatList","data","keyExtractor","index","toString","Help","topicContainer","header","Image","source","require","FAQs","CustomSidebarMenu","sideMenuIcon","DrawerContentScrollView","DrawerItemList","marginBottom","resizeMode","Drawer","createDrawerNavigator","App","NavigationContainer","Navigator","initialRouteName","screenOptions","headerTitleAlign","drawerActiveTintColor","drawerInactiveTintColor","drawerContentOptions","activeTintColor","inactiveTintColor","itemStyle","marginVertical","drawerContent","Screen","name","component","options","headerStyle","headerTitleStyle","module","exports"],"mappings":"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","file":"static/js/app.62ea1a87.chunk.js","sourcesContent":["/**\r\n * The input box is used for entering a word.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport { StyleSheet, TextInput } from 'react-native';\r\n\r\nexport default class InputBox extends React.Component {\r\n    render(){\r\n        return (\r\n            <TextInput\r\n                style={styles.inputBox}\r\n                placeholder={this.props.placeholder}\r\n                onChangeText={this.props.onChangeText}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    inputBox: {\r\n        marginTop: 20,\r\n        width: \"80%\",\r\n        height: 40,\r\n        borderWidth: 2,\r\n        alignSelf: 'center',\r\n        textAlign: 'center'\r\n    }\r\n})","/**\r\n * The search button is used for fetching data. It\r\n * is not defined here as the state is in the screen\r\n * code.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native';\r\n\r\nexport default class SearchButton extends React.Component {\r\n    render(){\r\n        return (\r\n            <TouchableOpacity style={styles.button} onPress={this.props.onPress}>\r\n                <Text style={styles.buttonText}>Search</Text>\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        marginTop: 20,\r\n        width: 100,\r\n        height: 30,\r\n        backgroundColor: \"red\",\r\n        alignSelf: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        textAlign: 'center'\r\n    },\r\n    buttonText: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 20,\r\n        color: \"white\"\r\n    }\r\n});","/**\r\n * The speech button is used for converting text to speech.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport { Text, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport * as Speech from 'expo-speech';\r\n\r\nexport default class SearchButton extends React.Component {\r\n    speak = async () => {\r\n        Speech.speak(this.props.text);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <TouchableOpacity\r\n                style={{alignSelf: 'flex-start'}}\r\n                onPress={() => {this.speak()}}>\r\n                <Text style={styles.text}>{this.props.text}</Text>\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 30\r\n    }\r\n});","/**\r\n * The Dictionary screen consists of the input box, search button\r\n * and few lines for help.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport { Text, View, FlatList } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport InputBox from '../components/InputBox';\r\nimport SearchButton from '../components/SearchButton';\r\nimport SpeechButton from '../components/SpeechButton';\r\n\r\nexport default class Dictionary extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: '',\r\n            word: '',\r\n            wordData: []\r\n        }\r\n    }\r\n\r\n    getWordData = async () => {\r\n        const { input } = this.state;\r\n\r\n        this.setState({\r\n            word: input.toLowerCase(),\r\n            wordData: []\r\n        });\r\n\r\n        var url = `https://api.dictionaryapi.dev/api/v2/entries/en/${input}`;\r\n\r\n        // Fetching data from the URL\r\n        await fetch(url)\r\n            .then(response => response.json())\r\n            .then(responseJson => {\r\n                // A word data array for storing the data.\r\n                var wordDataArr = [];\r\n\r\n                /**\r\n                 * We check whether the meaning of the word is present\r\n                 * with a key named title from response data. If title\r\n                 * is absent, then we fetch the data and if it's present\r\n                 * we show \"Not Found\" for the word.\r\n                 */\r\n                if(!responseJson.title) {\r\n                    for(var i in responseJson) {\r\n                        var meanings = responseJson[i].meanings;\r\n                        meanings.map(item => {\r\n                            wordDataArr.push([item.partOfSpeech.toUpperCase(), item.definitions[0].definition]);\r\n                        });\r\n                    }\r\n                } else {\r\n                    wordDataArr = [[\"NOT FOUND\", \"Not Found\"]]\r\n                }\r\n\r\n                this.setState({\r\n                    wordData: wordDataArr\r\n                });\r\n            })\r\n    }\r\n\r\n    renderItem = (item) => {\r\n        return (\r\n            <View style={{marginTop: 20}}>\r\n                <Text>{item.item[0]}</Text>\r\n                <Text>{item.item[1]}</Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <ScrollView style={{flex: 1, backgroundColor: \"white\"}} keyboardShouldPersistTaps=\"handled\">\r\n                <View style={{flexDirection: 'row', justifyContent: 'center'}}>\r\n                    <InputBox\r\n                        placeholder=\"Enter a word\"\r\n                        onChangeText={(text) => {\r\n                            this.setState({\r\n                                input: text\r\n                            });\r\n                        }}\r\n                    />\r\n                </View>\r\n                <SearchButton onPress={() => {\r\n                    if(this.state.input){\r\n                        this.getWordData();\r\n                    }\r\n                }} />\r\n                <View style={{marginTop: 20, marginLeft: 15}}>\r\n                    <SpeechButton text={this.state.word} />\r\n                    <FlatList\r\n                        data={this.state.wordData}\r\n                        renderItem={this.renderItem}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                    />\r\n                </View>\r\n                <View style={{marginTop: 50}}>\r\n                    <Text style={{textAlign: 'center'}}>Type a word and click on Search. You will get the meaning of the word.</Text>\r\n                    <Text style={{marginTop: 10, textAlign: 'center'}}>Click on the word and you can hear the pronunciation of the word.</Text>\r\n                    <Text style={{marginTop: 10, fontWeight: \"bold\", textAlign: 'center'}}>Created by Areen Rath</Text>\r\n                </View>\r\n            </ScrollView>\r\n        );\r\n    }\r\n}","/**\r\n * The Help screen consists of steps for help in anything\r\n * related to the app and FAQs.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport { Text, View, StyleSheet, Image } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\n\r\nexport default class Help extends React.Component {\r\n    render(){\r\n        return (\r\n            <ScrollView style={{flex: 1, backgroundColor: \"white\"}}>\r\n                <View style={styles.topicContainer}>\r\n                    <Text style={styles.header}>Searching a Word Meaning</Text>\r\n                    <Text style={{marginTop: 20}}>1. Type a word.</Text>\r\n                    <Text>2. Click on the Search button.</Text>\r\n                    <Image\r\n                        style={{width: 300, height: 100}}\r\n                        source={require('../assets/search.png')}\r\n                    />\r\n                    <Text>3. You will get the meaning of the word.</Text>\r\n                    <Image\r\n                        style={{width: 300, height: 150}}\r\n                        source={require('../assets/result.png')}\r\n                    />\r\n                </View>\r\n                <View style={styles.topicContainer}>\r\n                    <Text style={styles.header}>Text-to-Speech</Text>\r\n                    <Text style={{marginTop: 20}}>1. Click on the word.</Text>\r\n                    <Text>2. You can hear the pronunciation of the word.</Text>\r\n                </View>\r\n                <View style={styles.topicContainer}>\r\n                    <Text style={styles.header}>FAQs</Text>\r\n                    <Text style={styles.FAQs}>Q: Is this an online or an offline app?</Text>\r\n                    <Text>A: It is an online app.</Text>\r\n                    <Text style={styles.FAQs}>Q: Is this app in development?</Text>\r\n                    <Text>A: Yes, this app is in development but the releases are not buggy.</Text>\r\n                    <Text style={styles.FAQs}>Q: Why can't I see the meanings of the words?</Text>\r\n                    <Text>\r\n                        A: If you can't see the meanings of the words, it may be because of slow or no network. On startup,\r\n                        it may take time for the meanings of the word to be displayed.\r\n                    </Text>\r\n                    <Text style={styles.FAQs}>Q: Why can't I listen to the pronunciation of the words?</Text>\r\n                    <Text>\r\n                        A: If you can't listen to the pronunciation of the words, it may be because of slow or no network.\r\n                        On startup, it may take time for pronunciation of the word to be heard.\r\n                    </Text>\r\n                    <Text style={[styles.FAQs, {marginLeft: -15, textAlign: 'center'}]}>\r\n                        In case of slow network, please wait for the meaning of the word to be displayed or for the\r\n                        pronunciation of the word to be heard.\r\n                    </Text>\r\n                </View>\r\n                <Text style={{marginTop: 30, fontWeight: \"bold\", textAlign: 'center'}}>Created by Areen Rath</Text>\r\n            </ScrollView>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    topicContainer: {\r\n        marginTop: 20,\r\n        marginLeft: 15\r\n    },\r\n    header: {\r\n        marginTop: 20,\r\n        fontSize: 30,\r\n        fontWeight: \"bold\"\r\n    },\r\n    FAQs: {\r\n        marginTop: 20\r\n    }\r\n});","import * as React from 'react';\r\nimport { View, StyleSheet, Image } from 'react-native';\r\nimport { DrawerContentScrollView, DrawerItemList } from '@react-navigation/drawer';\r\n\r\nexport default class CustomSidebarMenu extends React.Component {\r\n    render(){\r\n        let props = this.props;\r\n        return (\r\n            <View style={{flex: 1, backgroundColor: \"white\"}}>\r\n                <Image\r\n                    source={require('../assets/icon.png')}\r\n                    style={styles.sideMenuIcon}\r\n                />\r\n                <DrawerContentScrollView {...props}>\r\n                    <DrawerItemList {...props} />\r\n                </DrawerContentScrollView>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    sideMenuIcon: {\r\n        width: 100,\r\n        height: 100,\r\n        alignSelf: 'center',\r\n        marginTop: 60,\r\n        marginBottom: 60,\r\n        resizeMode: \"contain\"\r\n    }\r\n});","/**\n * Dictionary ©\n * Areen Rath\n * \n */\n\n/**\n * The App contains the Dictionary screen at start with a drawer\n * navigator. This drawer navigator also contains the Home screen\n * button.\n */\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport Dictionary from './screens/Dictionary';\nimport Help from './screens/Help';\nimport CustomSidebarMenu from './components/CustomSidebarMenu';\n\n// Creating the drawer navigator.\nconst Drawer = createDrawerNavigator();\n\nexport default class App extends React.Component {\n  render(){\n    let props = this.props;\n    return (\n      <NavigationContainer>\n        <Drawer.Navigator\n          initialRouteName=\"English Dictionary\"\n          screenOptions={{\n            headerTitleAlign: 'center',\n            drawerActiveTintColor: \"#ffaa00\",\n            drawerInactiveTintColor: \"black\"\n          }}\n          drawerContentOptions={{\n            activeTintColor: \"orange\",\n            inactiveTintColor: \"black\",\n            itemStyle: {marginVertical: 5}\n          }}\n          drawerContent={props => <CustomSidebarMenu {...props} />}>\n          <Drawer.Screen\n            name=\"English Dictionary\"\n            component={Dictionary}\n            options={{\n              headerStyle: {\n                  backgroundColor: \"#ffaa00\"\n              },\n              headerTitleStyle: {\n                  fontWeight: \"bold\"\n              }\n            }}\n          />\n          <Drawer.Screen\n            name=\"Help and FAQs\"\n            component={Help}\n            options={{\n              headerStyle: {\n                  backgroundColor: \"#ffaa00\"\n              },\n              headerTitleStyle: {\n                  fontWeight: \"bold\"\n              }\n            }} \n          />\n        </Drawer.Navigator>\n      </NavigationContainer>\n    );\n  }\n}","module.exports = __webpack_public_path__ + \"static/media/search.504a041c.png\";","module.exports = __webpack_public_path__ + \"static/media/result.d228d718.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.446bff53.png\";"],"sourceRoot":""}